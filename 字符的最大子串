class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        if(s.length()==0)return 0;
        vector<int>a(s.length(),0);
        a[0]=1;
        int k=0;
        string t=s[0];
        for(int i=1;i<s.length();i++){
            int pos=t.find(s[i]);
            if(pos+1){
                int d=i-pos;
                if(d<=a[i-1]){
                    a[i]=a[i-1];
                }
                else{
                    a[i]=a[i-1]+1;
                }
            }
            else {
                a[i]=a[i-1]+1;
                t+=s[i];

            }
        }
        sort(a.begin(),a.end());
        return a[s.length()-1];
    }
};

//正确答案，使用字典判断，另外使用i，j维护现在的最大字串
class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        int res=0,j=0;
        unordered_map<char,int>m;
        for(int i=0;i<s.length();i++){
            m[s[i]]++;
            while(m[s[i]]>1){
                m[s[j]]--;
                j++;
            }
            res=res>(i-j+1)?res:(i-j+1);
        }
        return res;
    }
};