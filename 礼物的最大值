class Solution {
public:
    int row,col;
    int maxValue(vector<vector<int>>& grid) {
        row=grid.size();
        col=grid[0].size();
        return dfs(0,0,grid);
    }
    int dfs(int i,int j,vector<vector<int>>& grid){
        //贪心法
        if(i>=row||j>=col)return 0;
        int res=grid[i][j];
        //向右移动
        //向下移动
        if(dfs(i+1,j,grid)>dfs(i,j+1,grid))res+=dfs(i+1,j,grid);
        else res+=dfs(i,j+1,grid);
        return res;


    }
};
//思路大致一样，用的求解方法不一样。
class Solution {
public:
    int row,col;
    int maxValue(vector<vector<int>>& grid) {
        row=grid.size();
        col=grid[0].size();
        if(grid.empty()||grid[0].empty())return 0;
        int dp[row][col];
        int i=0,j=0;
        dp[0][0]=grid[0][0];
        for(i=1;i<row;i++){
            dp[i][0]=dp[i-1][0]+grid[i][0];
        }
        for(j=1;j<col;j++){
            dp[0][j]=grid[0][j]+dp[0][j-1];
        }
        for(i=1;i<row;i++){
            for(j=1;j<col;j++){
                if(dp[i-1][j]>dp[i][j-1])dp[i][j]=dp[i-1][j]+grid[i][j];
                else dp[i][j]=dp[i][j-1]+grid[i][j];
            }
        }
        return dp[row-1][col-1];
    }
};